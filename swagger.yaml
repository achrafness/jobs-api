openapi: 3.0.0
info:
  title: Jobs Api
  contact: {}
  version: '1.0'
servers:
- url: https://jobs-api-vw4r.onrender.com/api/v1
  variables: {}
paths:
  /jobs:
    get:
      tags:
      - Jobs
      summary: getAllJobs
      operationId: getAllJobs
      parameters: []
      responses:
        '200':
          description: Successful response
          headers: {}
      deprecated: false
      security:
        - bearer: []
    post:
      tags:
      - Jobs
      summary: createJob
      operationId: createJob
      security:
        - bearer: []
      requestBody:
        description: Job details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '200':
          description: Successful response
      deprecated: false
      parameters: []
  /jobs/{id}:
    parameters:
    - in: path
      name: id
      schema:
        type: string
      required: true
      description: the job id
    get:
      tags:
      - Jobs
      summary: getJob
      operationId: getJob
      parameters: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security:
      - bearer: []
    patch:
      tags:
      - Jobs
      summary: updateJob
      operationId: updateJob
      parameters: []
      security:
        - bearer: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/updateJobRequest'
              - example:
                  company: google
                  position: full-stack
                  status: interview
            example:
              company: google
              position: full-stack
              status: interview
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
    delete:
      tags:
      - Jobs
      summary: deleteJob
      operationId: deleteJob
      parameters: []
      security:
        - bearer: []
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
  /auth/login:
    post:
      tags:
      - Auth
      summary: login
      operationId: login
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/loginrequest'
              - example:
                  email: string
                  password: string
            example:
              email: string
              password: string
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
  /auth/register:
    post:
      tags:
      - Auth
      summary: register
      operationId: register
      parameters: []
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/registerrequest'
              - example:
                  name: string
                  email: string
                  password: string
            example:
              name: string
              email: string
              password: string
        required: true
      responses:
        '200':
          description: ''
          headers: {}
      deprecated: false
      security: []
components:
  schemas:
    Job:
      type: object
      properties:
        company:
          type: string
        position:
          type: string
        status:
          type: string
    updateJobRequest:
      title: updateJobRequest
      required:
      - company
      - position
      - status
      type: object
      properties:
        company:
          type: string
        position:
          type: string
        status:
          type: string
      example:
        company: google
        position: full-stack
        status: interview
    loginrequest:
      title: loginrequest
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: string
        password: string
    registerrequest:
      title: registerrequest
      required:
      - name
      - email
      - password
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      example:
        name: string
        email: string
        password: string
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
security: []
tags:
- name: Jobs
  description: ''
- name: Auth
  description: ''
